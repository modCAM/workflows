# This workflow checks for changes made to the VERSION file. It should block
# changes made by the developer, but it should let changes pass if they were
# merged in from 'main'.
#
# Developers should not touch the VERSION file! It is automatically updated by a
# workflow when a branch is merged into 'main'.

name: Check VERSION file

on: pull_request

env:
  VERSION_FILE: VERSION

jobs:
  check-version:
    name: Check version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Check version
        env:
          branch_base: origin/${{ github.event.pull_request.base.ref }}
          branch_pr: origin/${{ github.event.pull_request.head.ref }}
          refspec_base: +${{ github.event.pull_request.base.sha }}:remotes/origin/${{ github.event.pull_request.base.ref }}
          refspec_pr: +${{ github.event.pull_request.head.sha }}:remotes/origin/${{ github.event.pull_request.head.ref }}
        run: |
          # Fetch enough history to find a common ancestor commit (aka merge-base):
          git fetch origin ${{ env.refspec_pr }} --depth=$(( ${{ github.event.pull_request.commits }} + 1 )) \
            --no-tags --prune --no-recurse-submodules

          # `actions/checkout` fetched a specific commit, not a branch (ref), so that commit was checked out in a
          # detached HEAD state. Depending on what you do, you may want to additionally switch to the branch
          # the refspec assigned the commit to in the prior fetch command:
          git switch -c ${{ env.branch_pr }}

          # This should get the oldest commit in the local fetched history (which may not be the commit the PR branched from):
          COMMON_ANCESTOR=$( git rev-list --first-parent --max-parents=0 --max-count=1 ${{ env.branch_pr }} )
          DATE=$( git log --date=iso8601 --format=%cd "${COMMON_ANCESTOR}" )

          # Get all commits since that commit date from the base branch
          git fetch origin ${{ env.refspec_base }} --shallow-since="${DATE}" \
            --no-tags --prune --no-recurse-submodules

          version_changed=$(git diff --quiet $(git merge-base --fork-point ${{ env.branch_base }}) -- VERSION; echo $?)
          if [ $version_changed -ne 0 ]; then
            echo 'VERSION file has changed! To restore the VERSION file, you need to...'
            echo '  git restore --source=$(git merge-base --fork-point main) -- VERSION'
            echo '  git add VERSION'
            echo '  git commit -m "Restore VERSION"'
          fi
          exit $version_changed

      # - name: Check version
      #   env:
      #     branch_base: origin/${{ github.event.pull_request.base.ref }}
      #   run: |
      #     version_changed=$(git diff --quiet $(git merge-base --fork-point ${{ env.branch_base }}) -- VERSION; echo $?)
      #     if [ $version_changed -ne 0 ]; then
      #       echo 'VERSION file has changed! To restore the VERSION file, you need to...'
      #       echo '  git restore --source=$(git merge-base --fork-point main) -- VERSION'
      #       echo '  git add VERSION'
      #       echo '  git commit -m "Restore VERSION"'
      #     fi
      #     exit $version_changed
